generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       ="postgresql://postgres.lorioanjlqcungjqjqqa:wlCRhcz3r9IVsIuo@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?pgbouncer=true"
  directUrl =  "postgresql://postgres.lorioanjlqcungjqjqqa:wlCRhcz3r9IVsIuo@aws-0-eu-central-1.pooler.supabase.com:5432/postgres"
  }


model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]   // No need for @relation(onDelete: Cascade) here
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // Add onDelete: Cascade here
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // Add onDelete: Cascade here
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username      String   @unique
  password  String  
  role      Role      @default(STUDENT)
  notes     Note[]    @relation("UserNotes")
  posts     Post[]    
  likes     Like[] 
  comments  Comment[] 
  sharedNotes SharedNote[] @relation("TeacherNotes")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Note {
  id          String       @id @default(cuid())
  title       String
  content     String
  isPublic    Boolean       @default(false)
  authorId    String
  author      User          @relation("UserNotes", fields: [authorId], references: [id])
  sharedWith  SharedNote[]  @relation("NoteShares")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model SharedNote {
  id        String   @id @default(cuid())
  noteId    String
  teacherId String
  note      Note     @relation("NoteShares", fields: [noteId], references: [id])
  teacher   User     @relation("TeacherNotes", fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
}

enum Role {
  STUDENT
  TEACHER
}